accessible: true
author: Aurélie MASSART, Alexandre KÜHN & Hua Yang HU
context: |+
    Soit une implémentation d'une liste **simplement chaînée** utilisant les classes ``Node`` et ``List`` suivantes :

    .. code-block:: java

        public class List {
            public Node first;

            public List() {
                this.first = null; // empty list
            }
        }

        public class Node {
            public int value;
            public Node next;

            public Node(int v) {
                this.value = v;
                this.next = null;
            }
        }

    Nous vous demandons d'ajouter une méthode ``reverse`` dans ``List`` avec les spécifications suivantes :

    .. code-block:: java

        /*
         * @pre:  /
         * @post: La liste courante est modifiée:
         *        - La liste courante est inversée,
         *          càd que les liens next sont inversées;
         *        - L'ancien premier noeud devient le dernier noeud,
         *          et l'ancien dernier noeud devient le premier noeud;
         */
        public void reverse()

    Par exemple, supposons que vous avons la liste ``List`` **l** suivante :

    ``l: node(value: 10) -> node(value: 20) -> node(value: 30)``

    Le résultat de ``l.reverse()`` est une modification de ``l`` :

    ``l: node(value: 30) -> node(value: 20) -> node(value: 10)``

    .. image:: OWM11_22/Reverse.png
        :height: 481px
        :width: 951px
        :scale: 70%

    Idéalement, ``reverse`` devrait traverser qu'une seule fois la liste.

    **Hint:** vous pouvez utiliser plusieurs pointeurs pour parcourir la liste.

    
    Le code que vous écrivez sera inséré à la zone commentée ci-dessous :

    .. code-block:: java
            
        public class List {
            public Node first;

            public List() {
                this.first = null;
            }

            public void reverse() {
                /* votre code */
            }

        }

        public Node(int v) {
            this.value = v;
            this.next = null;
        }

environment: java7
groups: false
limits:
    memory: '200'
    time: '30'
    output: '2'
name: 'Mission 11 : Question intermédiaire 7 : Reverse de liste'
network_grading: false
order: 22
problems:
    q1:
        language: Java
        type: code
        name: Reverse de liste simplement chaînée
        header: 'Insérez le code que vous voulez ajouter dans la classe ``List``, comme indiqué à la fin de l''énoncé ci-dessus.'

weight: 1.0
