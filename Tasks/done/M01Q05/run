#! /bin/python3
# -*- coding: utf-8 -*-

#   Copyright (c) 2015, 2016 François Michel, Clémentine Munyabarenzi
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.




import subprocess 
import shlex
import sys
import re
from inginious import feedback

EXERCICE = "Exercice5"
CUSTOMSCRIPT=0
CORR=0

# EXECCUSTOM vaut 0 si on n'exécute pas de script "custom" pour faire des vérifications supplémentaires
EXECCUSTOM=0
NEXERCICES=1
CODELITTERAL=".. code-block::\n\n"
JAVAC="javac -cp .:/usr/share/java/junit.jar:/usr/share/java/hamcrest-core.jar"
JAVA="run_student --time 20 java -ea -cp .:./student:/usr/share/java/junit.jar:/usr/share/java/hamcrest-core.jar"

JAVAC_ARGS = shlex.split(JAVAC)
JAVA_ARGS = shlex.split(JAVA)

subprocess.call(['parsetemplate', '-o', 'student/' + EXERCICE + 'Stu.java', 'student/' + EXERCICE + 'Vide.java'], universal_newlines=True)

OUTCUSTOM=0
if EXECCUSTOM != 0:
    OUTCUSTOM=subprocess.call(['sh', CUSTOMSCRIPT], universal_newlines=True)

if OUTCUSTOM != 0:
    exit()

with open('logOther.out', 'w') as f:
    subprocess.call(JAVAC_ARGS + ['student/' + EXERCICE + '.java'], universal_newlines=True, stderr=f)

with open('log.out', 'w') as f:
    subprocess.call(JAVAC_ARGS + ['student/' + EXERCICE + '.java'], universal_newlines=True, stderr=f)


LOG = open('log.out')

OUTPUT = LOG.read()

LOG.close()

OUTCORR = ""
if CORR != 0:
    PROC = subprocess.Popen(JAVAC_ARGS + ['student/' + EXERCICE + 'Corr.java'], stdout=subprocess.PIPE, universal_newlines=True)
    OUTCORR = PROC.stdout.read()
    PROC.communicate()

with open('logOther.out', 'r') as f:
    OUTOTHER = f.read()

ERREURENSEIGNANT=0
MESSAGEENSEIGNANT=""
if OUTCORR != "":
    # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
    # sed permet d'indenter chaque ligne de son input avec une tabulation
    with open('in', 'w+') as f:
        f.write(OUTCORR)
        f.flush()
        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], universal_newlines=True, stdin=f, stdout=subprocess.PIPE)
        OUTCORR = PROC.stdout.read()
        PROC.communicate()
    ERREURENSEIGNANT = 1
    MESSAGEENSEIGNANT = OUTCORR

if OUTOTHER != "":
    # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
    # sed permet d'indenter chaque ligne de son input avec une tabulation
    with open('in', 'w+') as f:
        f.write(OUTOTHER)
        f.flush()
        f.seek(0)
        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], universal_newlines=True, stdin=f, stdout=subprocess.PIPE)
        out1 = PROC.stdout
        PROC2 = subprocess.Popen(['sed', 's/%/%%/g'], universal_newlines=True, stdin=out1, stdout=subprocess.PIPE)
        OUTOTHER = PROC2.stdout.read()
        PROC.communicate()
        PROC2.communicate()
    ERREURENSEIGNANT = 1
    MESSAGEENSEIGNANT = MESSAGEENSEIGNANT + "\n" + OUTOTHER
    
if ERREURENSEIGNANT != 0:
    with open('outenseignant.out', 'w+') as f:
        f.write("Le programme ne compile pas: \n " + CODELITTERAL + MESSAGEENSEIGNANT + "\n")
        f.flush()
        f.seek(0)
        feedback.set_global_result('failed')
        feedback.set_global_feedback(f.read())
    sys.exit(0)
    
ERREUR=0
# Si le fichier est vide et qu'il n'y a donc pas d'erreur de compilation
if OUTPUT == "":
    with open('err.txt', 'w+') as f:
        # On lance l'exercice 1
        RESPROC = subprocess.Popen(JAVA_ARGS + ['student/' + EXERCICE], universal_newlines=True, stderr=f, stdout=subprocess.PIPE)
        OUTPUT = RESPROC.stdout.read()
        RESPROC.communicate()
        RESULTAT = RESPROC.returncode
        print("RES="+str(RESULTAT))
        f.flush()
        f.seek(0)
        OUTERR = f.read()
    # S'il y a des erreurs dans l'exécution du programme (écrites sur stderr)
    if RESULTAT == 127:
        if NEXERCICES == 1:
            feedback.set_global_result('success')
            feedback.set_problem_feedback("Bravo, votre code est correct !", "q1")
        else:
            j=1
            while j <= NEXERCICES:
                # On fait un feedback positif par question
                feedback.set_global_result('success')
                feedback.set_problem_feedback("Bravo, votre code est correct !", "q"+str(j))
                #subprocess.call(['feedback', '-i', 'q' + j, '-r', 'success', '-f', "Vous avez bien répondu à cette question"])
                j = j + 1
    elif RESULTAT == 252:
        feedback.set_global_result('failed')
        feedback.set_global_feedback("La limite de mémoire de votre programme est dépassée")
        sys.exit(0)
    elif RESULTAT == 253:
        feedback.set_global_result('timeout')
        feedback.set_global_feedback("La limite de temps d'exécution de votre programme est dépassée")
        #subprocess.call(['feedback', '-r', 'timeout', '-f', "La limite de temps d'exécution de votre programme est dépassée"])
        exit()
    else:
        # Sinon c'est que les tests ont échoué, le programme possède des erreurs.
        if NEXERCICES == 1:
            # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
            with open('outerrfb.err', 'w+') as f:
                f.write(OUTERR)
                f.flush()
                f.seek(0)
                print('outerr = "' + OUTERR + '"')
                with open('temp1ex.out', 'w+') as f2:
                    subprocess.call(['sed', '-e', 's/^/\t/'], stdout=f2, universal_newlines=True, stdin=f)
                    f2.seek(0)
                    print('test:"' + f2.read() + '"')
                    f2.seek(0)
                    PROC = subprocess.Popen(['sed', 's/%/%%/g'], stdout=subprocess.PIPE, stdin=f2, universal_newlines=True)
                    OUTERR = PROC.stdout.read()
                    PROC.communicate()
            with open('feedback1ex.out', 'w+') as f:
                f.write("Il semble que vous ayiez fait des erreurs dans votre code...\n " + CODELITTERAL + OUTERR + "\n")
                f.flush()
                f.seek(0)
                feed = f.read()
                feedback.set_global_result('failed')
                feedback.set_problem_feedback(feed, "q1")
                ERREUR=1
        else:
            i=1
            while i <= NEXERCICES:
                # On récupère un feedback par question dans le System.err, en suivant le format imposé par convention
                with open('outerrnex.out', 'w+') as f:
                    f.write(OUTERR)
                    f.flush()
                    f.seek(0)
                    with open('question.out', 'w+') as f2:
                        PROC = subprocess.Popen(['sed', '-e', "/Question " + str(i) + " :/,/Question [^\D1] :/!d"], universal_newlines=True, stdout=f2, stdin=f)
                        PROC.communicate()
                        f2.seek(0)
                        p = re.compile("Question [0-9] :")
                        OUTERRPARQUESTION = p.sub('', f2.read())
                if OUTERRPARQUESTION == "":
                    feedback.set_global_result('success')
                    feedback.set_problem_feedback("Vous avez bien répondu à cette question", "q" + str(i))
                else:
                    with open('outerrparq.out', 'w+') as f:
                        f.write(OUTERRPARQUESTION)
                        f.seek(0)
                        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], stdin=f, stdout=subprocess.PIPE, universal_newlines=True)
                        outsed1 = PROC.stdout
                        PROC2 = subprocess.Popen(['sed', 's/%/%%/g'], stdin=outsed1, stdout=subprocess.PIPE, universal_newlines=True)
                        OUTERRPARQUESTION = PROC2.stdout.read()
                        PROC.communicate()
                        PROC2.communicate()
                        feed = "Il semble que vous ayiez fait des erreurs dans votre code...\n " + CODELITTERAL + OUTERRPARQUESTION + "\n"
                        feedback.set_global_result('failed')
                        feedback.set_problem_feedback(feed, "q" + str(i))
                i = i+1
            ERREUR=1

    # On vérifie si la tâche s'est bien déroulée ou s'il y a eu un souci, et on fait un feedback de la tâche complète
    if ERREUR == 0:
        feedback.set_global_result('success')
        feedback.set_global_feedback("Bravo, votre code est correct !")
    else:
        feedback.set_global_result('failed')
        feedback.set_global_feedback("Vous n'avez pas réussi tous les exercices")
    
else:
    # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
    # sed permet d'indenter chaque ligne de son input avec une tabulation
    with open('outputglobal.out', 'w+') as f:
        f.write(OUTPUT)
        f.seek(0)
        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], stdin=f, stdout=subprocess.PIPE, universal_newlines=True)
        outsed1 = PROC.stdout
        PROC2 = subprocess.Popen(['sed', 's/%/%%/g'], stdin=outsed1, stdout=subprocess.PIPE, universal_newlines=True)
        OUTPUT = PROC2.stdout.read()
        PROC.communicate()
        PROC2.communicate()
        feed = "Votre programme ne compile pas: \n " + CODELITTERAL + OUTPUT + "\n"
        feedback.set_global_result('failed')
        feedback.set_global_feedback(feed)



